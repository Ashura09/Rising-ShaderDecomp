sampler Color_1_sampler;
float4 CubeParam;
sampler ShadowCast_Tex_sampler;
float4 ambient_rate;
float4 ambient_rate_rate;
samplerCUBE cubemap2_sampler;
samplerCUBE cubemap_sampler;
float3 fog;
float4 g_All_Offset;
float g_CubeBlendParam;
float2 g_ShadowFarInvPs;
float g_ShadowUse;
float4 g_TargetUvParam;
float4 g_specCalc1;
float4 g_specCalc2;
float4 light_Color;
float4 lightpos;
float4 muzzle_light;
float4 muzzle_lightpos;
sampler normalmap_sampler;
float4 point_light1;
float4 point_light2;
float4 point_lightEv0;
float4 point_lightEv1;
float4 point_lightEv2;
float4 point_lightpos1;
float4 point_lightpos2;
float4 point_lightposEv0;
float4 point_lightposEv1;
float4 point_lightposEv2;
float4 prefogcolor_enhance;
float4 spot_angle;
float4 spot_param;
float4 tile;

struct PS_IN
{
	float2 texcoord : TEXCOORD;
	float3 texcoord1 : TEXCOORD1;
	float3 texcoord3 : TEXCOORD3;
	float3 texcoord4 : TEXCOORD4;
	float4 texcoord7 : TEXCOORD7;
	float4 texcoord8 : TEXCOORD8;
	float3 texcoord5 : TEXCOORD5;
};

float4 main(PS_IN i) : COLOR
{
	float4 o;

	float4 r0;
	float4 r1;
	float4 r2;
	float4 r3;
	float4 r4;
	float4 r5;
	float4 r6;
	r0.xy = g_All_Offset.xy + i.texcoord.xy;
	r0 = tex2D(Color_1_sampler, r0);
	r1 = r0.w + -0.01;
	clip(r1);
	r1.z = 1;
	r1.x = r1.z + -spot_param.x;
	r1.x = 1 / r1.x;
	r2.xyz = spot_angle.xyz + -i.texcoord1.xyz;
	r1.y = dot(r2.xyz, r2.xyz);
	r1.y = 1 / sqrt(r1.y);
	r2.xyz = r1.yyy * r2.xyz;
	r1.y = 1 / r1.y;
	r1.w = dot(r2.xyz, lightpos.xyz);
	r1.w = r1.w + -spot_param.x;
	r1.x = r1.x * r1.w;
	r2.x = max(r1.w, 0);
	r1.w = 1 / spot_param.y;
	r1.x = r1.w * r1.x;
	r1.w = frac(-r2.x);
	r1.w = r1.w + r2.x;
	r2.x = dot(lightpos.xyz, i.texcoord3.xyz);
	r1.w = r1.w * r2.x;
	r1.x = r1.x * r1.w;
	r1.w = 1 / spot_angle.w;
	r1.y = r1.w * r1.y;
	r1.y = -r1.y + 1;
	r1.y = r1.y * 10;
	r1.x = r1.y * r1.x;
	r3.x = lerp(r1.x, r2.x, spot_param.z);
	r1.xyw = r3.xxx * light_Color.xyz;
	r2.x = r3.x * 0.5 + 0.5;
	r2.yzw = point_lightpos2.xyz + -i.texcoord1.xyz;
	r3.x = dot(r2.yzw, r2.yzw);
	r3.x = 1 / sqrt(r3.x);
	r2.yzw = r2.yzw * r3.xxx;
	r3.x = 1 / r3.x;
	r3.x = -r3.x + point_lightpos2.w;
	r3.x = r3.x * point_light2.w;
	r2.y = dot(r2.yzw, i.texcoord3.xyz);
	r2.yzw = r2.yyy * point_light2.xyz;
	r2.yzw = r3.xxx * r2.yzw;
	r3.xyz = muzzle_lightpos.xyz + -i.texcoord1.xyz;
	r3.w = dot(r3.xyz, r3.xyz);
	r3.w = 1 / sqrt(r3.w);
	r3.xyz = r3.www * r3.xyz;
	r3.w = 1 / r3.w;
	r3.w = -r3.w + muzzle_lightpos.w;
	r3.w = r3.w * muzzle_light.w;
	r3.x = dot(r3.xyz, i.texcoord3.xyz);
	r3.xyz = r3.xxx * muzzle_light.xyz;
	r4.xyz = point_lightpos1.xyz + -i.texcoord1.xyz;
	r4.w = dot(r4.xyz, r4.xyz);
	r4.w = 1 / sqrt(r4.w);
	r4.xyz = r4.www * r4.xyz;
	r4.w = 1 / r4.w;
	r4.w = -r4.w + point_lightpos1.w;
	r4.w = r4.w * point_light1.w;
	r4.x = dot(r4.xyz, i.texcoord3.xyz);
	r4.xyz = r4.xxx * point_light1.xyz;
	r4.xyz = r4.www * r4.xyz;
	r5.y = 2;
	r6 = r5.y + -g_specCalc1;
	r4.xyz = r4.xyz * r6.xxx;
	r3.xyz = r3.xyz * r3.www + r4.xyz;
	r2.yzw = r2.yzw * r6.yyy + r3.xyz;
	r3.x = 1 / i.texcoord7.w;
	r3.xy = r3.xx * i.texcoord7.xy;
	r3.xy = r3.xy * float2(0.5, -0.5) + 0.5;
	r3.xy = r3.xy + g_TargetUvParam.xy;
	r3 = tex2D(ShadowCast_Tex_sampler, r3);
	r3.y = i.texcoord7.z * g_ShadowFarInvPs.y + -g_ShadowFarInvPs.x;
	r3.y = -r3.y + 1;
	r3.x = -r3.x + r3.y;
	r3.x = r3.x + g_ShadowUse.x;
	r3.y = frac(-r3.x);
	r3.x = r3.y + r3.x;
	r1.xyw = r1.xyw * r3.xxx + r2.yzw;
	r2.y = -r3.x + 1;
	r3.xyz = point_lightposEv0.xyz + -i.texcoord1.xyz;
	r2.z = dot(r3.xyz, r3.xyz);
	r2.z = 1 / sqrt(r2.z);
	r2.w = 1 / r2.z;
	r3.xyz = r2.zzz * r3.xyz;
	r2.z = dot(r3.xyz, i.texcoord3.xyz);
	r2.w = -r2.w + point_lightposEv0.w;
	r2.w = r2.w * point_lightEv0.w;
	r3.xy = -r0.yy + r0.xz;
	r4.x = max(abs(r3.x), abs(r3.y));
	r3.x = r4.x + -0.015625;
	r3.y = (-r3.x >= 0) ? 0 : 1;
	r3.x = (r3.x >= 0) ? -0 : -1;
	r3.x = r3.x + r3.y;
	r3.x = (r3.x >= 0) ? -r3.x : -0;
	r0.xz = (r3.xx >= 0) ? r0.yy : r0.xz;
	r0.w = r0.w * prefogcolor_enhance.w;
	o.w = r0.w;
	r3.xyz = r0.xyz * point_lightEv0.xyz;
	r3.xyz = r2.zzz * r3.xyz;
	r3.xyz = r2.www * r3.xyz;
	r3.xyz = r6.zzz * r3.xyz;
	r1.xyw = r0.xyz * r1.xyw + r3.xyz;
	r3.xyz = point_lightposEv1.xyz + -i.texcoord1.xyz;
	r0.w = dot(r3.xyz, r3.xyz);
	r0.w = 1 / sqrt(r0.w);
	r3.xyz = r0.www * r3.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightposEv1.w;
	r0.w = r0.w * point_lightEv1.w;
	r2.z = dot(r3.xyz, i.texcoord3.xyz);
	r3.xyz = r0.xyz * point_lightEv1.xyz;
	r3.xyz = r2.zzz * r3.xyz;
	r3.xyz = r0.www * r3.xyz;
	r1.xyw = r3.xyz * r6.www + r1.xyw;
	r3.xyz = point_lightposEv2.xyz + -i.texcoord1.xyz;
	r0.w = dot(r3.xyz, r3.xyz);
	r0.w = 1 / sqrt(r0.w);
	r3.xyz = r0.www * r3.xyz;
	r0.w = 1 / r0.w;
	r0.w = -r0.w + point_lightposEv2.w;
	r0.w = r0.w * point_lightEv2.w;
	r2.z = dot(r3.xyz, i.texcoord3.xyz);
	r3.xyz = r0.xyz * point_lightEv2.xyz;
	r3.xyz = r2.zzz * r3.xyz;
	r3.xyz = r0.www * r3.xyz;
	r0.w = r5.y + -g_specCalc2.x;
	r1.xyw = r3.xyz * r0.www + r1.xyw;
	r3.xyz = r0.xyz * i.texcoord5.xyz;
	r2.yzw = r2.yyy * r3.xyz;
	r3.xyz = r0.xyz * ambient_rate.xyz;
	r2.yzw = r3.xyz * ambient_rate_rate.xyz + r2.yzw;
	r1.xyw = r1.xyw + r2.yzw;
	r3.xy = g_All_Offset.xy;
	r2.yz = i.texcoord.xy * tile.xy + r3.xy;
	r3 = tex2D(normalmap_sampler, r2.yzzw);
	r4 = tex2D(cubemap_sampler, i.texcoord4);
	r5 = tex2D(cubemap2_sampler, i.texcoord4);
	r6 = lerp(r5, r4, g_CubeBlendParam.x);
	r4 = r6 * ambient_rate_rate.w;
	r4.xyz = r3.www * r4.xyz;
	r2 = r2.x * r4;
	r0.w = r2.w * CubeParam.y + CubeParam.x;
	r2.xyz = r0.www * r2.xyz;
	r0.xyz = r0.xyz * r2.xyz;
	r3.xyz = r0.xyz * CubeParam.zzz + r1.xyw;
	r0.xyz = r0.xyz * CubeParam.zzz;
	r0.xyz = r1.xyw * -r0.xyz + r3.xyz;
	r0.w = r1.z + -CubeParam.z;
	r0.xyz = r2.xyz * r0.www + r0.xyz;
	r1.xyz = fog.xyz;
	r0.xyz = r0.xyz * prefogcolor_enhance.xyz + -r1.xyz;
	o.xyz = i.texcoord8.www * r0.xyz + fog.xyz;

	return o;
}
